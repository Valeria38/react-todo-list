{"version":3,"sources":["Form.js","Task.js","List.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["Form","_this","this","react_default","a","createElement","className","onSubmit","event","props","handleSubmit","placeholder","value","inputValue","onChange","handleChange","React","Component","Task","styles","textDecoration","todo","done","style","onClick","handleClick","id","onRemove","List","todos","map","src_Task","key","stateTodos","length","todosCount","setFilterBy","filterBy","clearCompleted","Main","state","setState","target","preventDefault","newTodo","prevState","concat","Object","toConsumableArray","updatedTodos","filter","countTodos","filteredTodos","getVisibleTodos","todosAmount","onCountTodos","src_Form","src_List","App","src_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.914b1536.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Form\">\r\n        <form onSubmit={event => this.props.handleSubmit(event)}>\r\n          <h1 className=\"Form__title\">todos</h1>\r\n          <input\r\n            className=\"Form__input\"\r\n            placeholder=\"What needs to be done?\"\r\n            value={this.props.inputValue}\r\n            onChange={event => this.props.handleChange(event)}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Form;","import React from \"react\";\r\n\r\nclass Task extends React.Component {\r\n  render() {\r\n    const styles = {\r\n      textDecoration: this.props.todo.done ? \"line-through\" : \"none\"\r\n    };\r\n\r\n    return (\r\n      <div className=\"Task\">\r\n        <span style={styles}>{this.props.todo.value}</span> &nbsp;\r\n        <span\r\n          className=\"Task__toggleState\"\r\n          onClick={() => this.props.handleClick(this.props.id)}\r\n        >\r\n          {this.props.todo.done ? \"Undo\" : \"Complete\"}\r\n        </span>\r\n        <span\r\n          className=\"Task__delete\"\r\n          onClick={() => this.props.onRemove(this.props.todo, this.props.id)}\r\n        >\r\n          &nbsp;&nbsp; X\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nclass List extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"List\">\r\n        {this.props.todos.map((todo) => (\r\n        <Task\r\n          key={todo.id}\r\n          todo={todo}\r\n          id={todo.id}\r\n          handleClick={this.props.handleClick}\r\n          onRemove={this.props.onRemove}\r\n        />\r\n    ))}\r\n      <div\r\n        className={\r\n          this.props.stateTodos.length ? \"List__footer List__show\" : \"List__footer\"\r\n        }\r\n      >\r\n      <div className=\"List__footer-flex-container\">\r\n        <span className=\"first\">{this.props.todosCount} item(s) left</span>\r\n        <div>\r\n          <span \r\n            onClick={() => this.props.setFilterBy(\"\")}\r\n            className={this.props.filterBy === \"\" ? \"border\" : \"\"}\r\n          >All </span>\r\n          <span \r\n            onClick={() => this.props.setFilterBy(\"active\")}\r\n            className={this.props.filterBy === \"active\" ? \"border\" : \"\"}\r\n          >Active </span>\r\n          <span\r\n            onClick={() => this.props.setFilterBy(\"completed\")}\r\n            className={this.props.filterBy === \"completed\" ? \"border\" : \"\"}\r\n          >Completed </span>\r\n        </div>\r\n        <span onClick={this.props.clearCompleted}>Clear completed</span>\r\n      </div>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;","import React from \"react\";\r\nimport Form from \"./Form\";\r\nimport List from \"./List\";\r\n\r\nclass Main extends React.Component {\r\n  state = {\r\n    inputValue: \"\",\r\n    todos: [\r\n      { value: \"learn react\", done: true, id: 1 },\r\n      { value: \"go for a walk\", done: false, id: 2 }\r\n    ],\r\n    filterBy: \"\"\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      inputValue: event.target.value\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (!this.state.inputValue) {\r\n      return;\r\n    }\r\n\r\n    const newTodo = {\r\n      value: this.state.inputValue,\r\n      done: false,\r\n      id:this.state.todos.length + 1\r\n    };\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        inputValue: \"\",\r\n        todos: [...prevState.todos, newTodo]\r\n      };\r\n    });\r\n  };\r\n\r\n  handleClick = id => {\r\n    this.setState(prevState => {\r\n      const updatedTodos = prevState.todos.map(todo => {\r\n        if (id === todo.id) {\r\n          todo.done = !todo.done;\r\n        }\r\n        return todo;\r\n      });\r\n\r\n      return {\r\n        todos: updatedTodos\r\n      };\r\n    });\r\n  };\r\n\r\n  onRemove = (todo, id) => {\r\n    const updatedTodos = [...this.state.todos].filter(todo => {\r\n      return todo.id !== id;\r\n    });\r\n\r\n    this.setState({\r\n      todos: updatedTodos\r\n    });\r\n  };\r\n\r\n  countTodos = () => {\r\n    const activeTodos = this.state.todos.filter(todo => !todo.done);\r\n    return activeTodos.length;\r\n  };\r\n\r\n  clearCompleted = () => {\r\n    const filteredTodos = this.state.todos.filter(todo => !todo.done);\r\n    this.setState({\r\n      todos: filteredTodos\r\n    });\r\n  };\r\n\r\n  setFilterBy = filterBy => {\r\n    this.setState({\r\n      filterBy: filterBy\r\n    });\r\n  };\r\n\r\n  getVisibleTodos = () => {\r\n    let filteredTodos = this.state.todos;\r\n\r\n    if (this.state.filterBy === \"active\") {\r\n      filteredTodos = filteredTodos.filter(todo => !todo.done);\r\n    } else if (this.state.filterBy === \"completed\") {\r\n      filteredTodos = filteredTodos.filter(todo => todo.done);\r\n    }\r\n\r\n    return filteredTodos;\r\n  };\r\n\r\n  render() {\r\n    let filteredTodos = this.getVisibleTodos();\r\n    let todosAmount = this.countTodos();\r\n\r\n    return (\r\n      <div className=\"Main\" onClick={this.onCountTodos}>\r\n        <Form\r\n          inputValue={this.state.inputValue}\r\n          handleChange={this.handleChange}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n        <List\r\n         setFilterBy={this.setFilterBy}\r\n         filterBy={this.state.filterBy}\r\n          todos={filteredTodos}\r\n          handleClick={this.handleClick}\r\n          onRemove={this.onRemove}\r\n          todosCount={todosAmount}\r\n          clearCompleted={this.clearCompleted}\r\n          stateTodos={this.state.todos}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}